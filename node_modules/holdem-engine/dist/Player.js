"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Player.ts
var Player_exports = {};
__export(Player_exports, {
  PlayerAction: () => PlayerAction,
  default: () => Player
});
module.exports = __toCommonJS(Player_exports);

// src/Card.ts
var suitEmojiMap = {
  h: "\u2665\uFE0F",
  d: "\u2666\uFE0F",
  c: "\u2663\uFE0F",
  s: "\u2660\uFE0F"
};
function cardToEmojiString(card) {
  return `${card.rank === "T" ? "10" : card.rank}${suitEmojiMap[card.suit]}`;
}

// src/Player.ts
var PlayerAction = {
  Fold: "Fold",
  Call: "Call",
  Raise: "Raise",
  Check: "Check",
  Bet: "Bet",
  Show: "Show",
  Hide: "Hide"
};
var Player = class {
  constructor(id, name, chips, hand = [], isFolded = false, betAmount = 0) {
    this.id = "";
    this.name = "";
    this.chips = 0;
    this.hand = [];
    this.isFolded = false;
    this.betAmount = 0;
    this.seatNumber = -1;
    this.showCards = false;
    this.id = id;
    this.name = name;
    this.chips = chips;
    this.hand = hand;
    this.isFolded = isFolded;
    this.betAmount = betAmount;
  }
  updateChips(amount) {
    this.chips += amount;
  }
  addCard(card) {
    this.hand.push(card);
  }
  /**
   * set seat number
   * @param seatNumber {number}
   */
  setSeat(seatNumber) {
    this.seatNumber = seatNumber;
  }
  setBetAmount(amount) {
    this.betAmount = amount;
  }
  getHandEmojiString() {
    return this.hand.map((card) => cardToEmojiString(card));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PlayerAction
});
